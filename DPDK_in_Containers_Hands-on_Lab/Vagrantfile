# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # use http proxy if avaiable
  if ENV['http_proxy'] && Vagrant.has_plugin?("vagrant-proxyconf")
   config.proxy.http     = ENV['http_proxy']
   config.proxy.https    = ENV['https_proxy']
   config.proxy.no_proxy = "localhost,127.0.0.1"
  end


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     vb.gui = false
     vb.memory = "6144"
     vb.cpus = "8"
  	vb.customize ["modifyvm", :id, "--ioapic", "on"]

      vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
      vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]
   end


  # Once the VM has booted, run all of our configuration stuff
   config.vm.provision "shell", inline: <<-SHELL
     	apt-get --force-yes -y -qq update -y --force-yes -qq
     	apt-get --assume-yes -qq install build-essential automake docker.io linux-headers-$(uname -a | awk '{print $3}') vim kmod python python-pip
	pip install -U pip six
  	curl -sO http://dpdk.org/browse/apps/pktgen-dpdk/snapshot/pktgen-dpdk-pktgen-3.1.1.tar.gz
	curl -sO http://fast.dpdk.org/rel/dpdk-16.11.1.tar.xz
	curl -sO http://openvswitch.org/releases/openvswitch-2.6.1.tar.gz
	tar xf dpdk-16.11.1.tar.xz
	tar xzf openvswitch-2.6.1.tar.gz
	tar xzf pktgen-dpdk-pktgen-3.1.1.tar.gz
	mkdir /home/ubuntu/training
	git init DPDK_in_Containers_Hands-on_Lab
	cd DPDK_in_Containers_Hands-on_Lab
	git remote add origin https://github.com/intel/SDN-NFV-Hands-on-Samples.git
	git config core.sparsecheckout true
	echo "DPDK_in_Containers_Hands-on_Lab" >> .git/info/sparse-checkout
	git pull origin master
	mv DPDK_in_Containers_Hands-on_Lab/dpdk-container-lab /home/ubuntu/training
	cd /home/ubuntu
	mv pktgen-dpdk-pktgen-3.1.1 /home/ubuntu/training/dpdk-container-lab/docker-build/pktgen/
	mv /home/ubuntu/training/dpdk-container-lab/docker-build/pktgen/pktgen-dpdk-pktgen-3.1.1 /home/ubuntu/training/dpdk-container-lab/docker-build/pktgen/pktgen
	cp -r /home/ubuntu/dpdk-stable-16.11.1 /home/ubuntu/training/dpdk-container-lab/docker-build/testpmd/
	mv /home/ubuntu/training/dpdk-container-lab/docker-build/testpmd/dpdk-stable-16.11.1 /home/ubuntu/training/dpdk-container-lab/docker-build/testpmd/dpdk
	chown -R ubuntu:ubuntu /home/ubuntu/training
	ln -s /usr/bin/automake-1.15 /usr/bin/automake-1.14
	echo 2048  > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
	mkdir /mnt/huge
	SHELL
end
